(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{304:function(e,a,t){"use strict";t.r(a);var n=t(43),r=Object(n.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"折腾一下nodejs开发环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#折腾一下nodejs开发环境","aria-hidden":"true"}},[e._v("#")]),e._v(" 折腾一下nodejs开发环境")]),e._v(" "),t("blockquote",[t("p",[e._v("工欲善其事，必先利其器。在本教程开始之前，让我们先看看手中的利器有哪些")])]),e._v(" "),t("ol",[t("li",[e._v("nodejs 8.5 这个版本的nodejs可以支持更多的es6特性，nodejs8以上版本对新语法有更全面的原生支持 , "),t("a",{attrs:{href:"http://node.green/",target:"_blank",rel:"noopener noreferrer"}},[e._v("nodejs各版本对ECMASCRIPT标准的支持情况"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("webstorm / vscode  IDE工具 "),t("em",[e._v("提示： 建议使用最新的webstorm版本(v2017.3),对jest集成度更高")])]),e._v(" "),t("li",[e._v("babel——将es6，es7, es8 编译为 es5或es6")]),e._v(" "),t("li",[e._v("eslint——代码质量静态检查以及统一代码风格")]),e._v(" "),t("li",[e._v("prettifer——漂亮的代码格式插件，有助于我们统一代码风格， 它也是2017年最另人兴奋的项目")]),e._v(" "),t("li",[e._v("lerna——一个微仓库管理工具，有了它我们可以方便的在一个项目里完成对多个npm包的统一管理")]),e._v(" "),t("li",[e._v("jest——大厂facebook出品的一个测试框架，不仅支持前端单元测试，还支持nodejs的模块测试")]),e._v(" "),t("li",[e._v("nodemon——监控文件变化")])]),e._v(" "),t("h1",{attrs:{id:"环境准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境准备","aria-hidden":"true"}},[e._v("#")]),e._v(" 环境准备")]),e._v(" "),t("ul",[t("li",[e._v("安装 "),t("strong",[e._v("nodejs 8.9.4")]),e._v(" "),t("a",{attrs:{href:"https://nodejs.org/en/download/",target:"_blank",rel:"noopener noreferrer"}},[e._v("nodejs下载地址"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("全局安装 "),t("strong",[e._v("yarn")])]),e._v(" "),t("li",[e._v("全局安装 "),t("strong",[e._v("cnpm")])])]),e._v(" "),t("h1",{attrs:{id:"那我们现在就开始吧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#那我们现在就开始吧","aria-hidden":"true"}},[e._v("#")]),e._v(" 那我们现在就开始吧")]),e._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#第一部分-使用babel编译"}},[e._v("第一部分 使用babel编译")])]),t("li",[t("a",{attrs:{href:"#第二部分-用lerna进行多包管理"}},[e._v("第二部分 用lerna进行多包管理")])]),t("li",[t("a",{attrs:{href:"#第三部分-eslint和prettier-使用代码规范检查及代码格式化"}},[e._v("第三部分 eslint和prettier 使用代码规范检查及代码格式化")])])])]),t("p"),e._v(" "),t("h2",{attrs:{id:"第一部分-使用babel编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一部分-使用babel编译","aria-hidden":"true"}},[e._v("#")]),e._v(" 第一部分 使用babel编译")]),e._v(" "),t("blockquote",[t("p",[e._v("先创建一个空目录大家没意见吧？")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mkdir project-demo\n\ncd project-demo\n")])])]),t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("让我们启动版本控制吧")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git init\n")])])]),t("blockquote",[t("p",[e._v("等等，好像还差点什么对了 "),t("strong",[e._v(".gitignore")]),e._v(" , 有一些文件夹和文件我不希望纳入版本控制，比如 node_modules目录, .idea目录")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# 我装个X,用shell直接写了，聪明的你用文件编辑器也可以哦\n\necho "node_modules\\n.idea" > .gitignore\n\n')])])]),t("blockquote",[t("p",[e._v("各位听众，现在我想在这个工程里使用 "),t("strong",[e._v("es6,es7")]),e._v(" 的新语法，并且希望项目的最终代码可以运行在 "),t("strong",[e._v("nodejs8")]),e._v(" 上，所以我需要安装以下几个模块")])]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("babel-core 它是babel的核心模块")]),e._v(" "),t("li",[e._v("babel-cli  babel命令行模块，提供了babel-node,有了babel-node我就可以直接运行使用了最新语法的代码，而无需事先编译")]),e._v(" "),t("li",[e._v("babel-preset-env  它是一个预设的环境，通过指定 env 我们就可以让最终代码运行在目标环境中，如 node4, node6, node7, node8, node9")])])]),e._v(" "),t("blockquote",[t("p",[e._v("好现在我们来安装这几个包，这里我使用 "),t("strong",[e._v("yarn")]),e._v(" 来安装，用 yarn 的好处是，它会在本地缓存安装过的包，当再次安装这些包的时候，它是直接从本地缓存里读取不再从网络下载，速度嘛，嘿嘿谁用谁知道！快得不要不要的！（我美啦美啦美啦）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yarn add babel-core babel-cli babel-preset-env\n")])])]),t("blockquote",[t("p",[e._v("哎？怎么下载这么慢？ ctrl + c , ctrl + c 先中断一下。\nF...F...F...K,我居然忘记设置 npm 淘宝镜像了，赶紧设置一下")])]),e._v(" "),t("p",[t("strong",[e._v("推荐阅读 "),t("a",{attrs:{href:"http://www.infoq.com/cn/articles/nodejs-module-mechanism",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入浅出Node.js（三）：深入Node.js的模块机制"),t("OutboundLink")],1)])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 全局设置 taobao 镜像\nnpm config set registry https://registry.npm.taobao.org\n\n# 再安装一次试试\nyarn add babel-core babel-cli babel-preset-env\n")])])]),t("blockquote",[t("p",[e._v("怎么样？是不是快得不要不要的？不信？要不要试试")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 把 node_modules 干掉 （嘿嘿 干掉）\nrm -rf node_modules\n\n# 再安装一次,感受一下飞一样的感觉\nyarn add babel-core babel-cli babel-preset-env\n\n# yarn 的缓存目录是?\nyarn cache dir\n\n# yarn 缓存了哪些包？\nyarn cache list\n")])])]),t("p",[t("strong",[e._v("想了解更多 "),t("code",[e._v("yarn")]),e._v(" 的功能吗？请移步到 "),t("a",{attrs:{href:"https://yarnpkg.com/zh-Hans/",target:"_blank",rel:"noopener noreferrer"}},[e._v("yarn官方文档"),t("OutboundLink")],1)])]),e._v(" "),t("blockquote",[t("p",[e._v("有点兴奋了，差点忘了正题，言归正转，我们接下来配置一下 "),t("strong",[e._v("babel")]),e._v(", 如何配置呢， 我们需要在项目根目录下创建一个 "),t("strong",[e._v(".babelrc")]),e._v(" 文件, 并设置目标环境为 "),t("strong",[e._v("node8")])])]),e._v(" "),t("p",[t("strong",[e._v("关于.babelrc的设置请参考 "),t("a",{attrs:{href:"https://www.npmjs.com/package/babel-preset-env",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel-preset-env"),t("OutboundLink")],1),e._v(" 以及 "),t("a",{attrs:{href:"https://babeljs.io/docs/usage/babelrc/",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel官方文档"),t("OutboundLink")],1)])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// .babelrc\n{\n  "presets": [[\n    "env",\n    {\n      "targets": {\n        "node": "8"\n      }\n    }\n  ]]\n}\n')])])]),t("blockquote",[t("p",[e._v("好了，现在 babel 我们已经配置完成了")])]),e._v(" "),t("h2",{attrs:{id:"第二部分-用lerna进行多包管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二部分-用lerna进行多包管理","aria-hidden":"true"}},[e._v("#")]),e._v(" 第二部分 用lerna进行多包管理")]),e._v(" "),t("blockquote",[t("p",[e._v("现在让我隆重介绍下一位重量级角色 "),t("code",[e._v("lerna")]),e._v(", 在文章最开始我已经说过， "),t("code",[e._v("lerna")]),e._v(" 是我们手中利器，是的 它实在是太有用了， 真的我不骗你。")])]),e._v(" "),t("p",[t("strong",[t("a",{attrs:{href:"https://lernajs.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("lerna的官方文档"),t("OutboundLink")],1),e._v(" 上是这样介绍的")])]),e._v(" "),t("blockquote",[t("p",[e._v("Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.")]),e._v(" "),t("p",[e._v("lerna是一个工具，它可以优化使用git和npm管理多包仓库的工作流。")]),e._v(" "),t("p",[e._v("我引入 "),t("code",[e._v("lerna")]),e._v(" 的目的也正是如此，我想把我的代码拆分成多个 package，又不想给每个 package 都建立一个独立的git仓库， lerna 正好可以帮我解决这个问题，我现在只需要创建一个 git仓库，使用相同的babel配置、单元测试配置以及代码规范及风格配置，就可以编辑并发布多个 package 了。")])]),e._v(" "),t("blockquote",[t("p",[e._v("真的是太爽了！不知道你们爽不爽，反正我爽了！！！")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 全局安装 lerna 吧\ncnpm i -g lerna\n\n# 在我们的项目根目录下 用 lerna 初始化一下\nlerna init\n")])])]),t("blockquote",[t("p",[e._v("好了，现在我们目录看起来应该是下面的样子")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".\n├── .git\n├── .gitignore\n├── lerna.json\n├── node_modules\n├── package.json\n├── packages\n└── yarn.lock\n")])])]),t("blockquote",[t("p",[e._v("接下来，我要配置一下 lerna.json")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// lerna.json\n{\n  "lerna": "2.2.0",\n  "packages": [\n    "packages/*"\n  ],\n  "commands": {\n    "bootstrap": {\n      "hoist": "**"\n    }\n  },\n  "version": "0.0.0",\n  "npmClient": "yarn"\n}\n')])])]),t("blockquote",[t("p",[e._v("为什么这么配？ 客官莫要着急上火， 且听我慢慢道来")])]),e._v(" "),t("blockquote",[t("p",[e._v("实际上当你执行了 "),t("code",[e._v("lerna init")]),e._v(" 命令之后，lerna会在项目根目录下创建一个 "),t("code",[e._v("lerna.json")]),e._v("  和  一个"),t("code",[e._v("packages目录")]),e._v("，其中 "),t("code",[e._v("lerna.json")]),e._v(" 用于设置lerna相关配置， "),t("code",[e._v("packages")]),e._v(" 目录用于存放我们的 "),t("code",[e._v("package")]),e._v("。")])]),e._v(" "),t("p",[e._v("下面是配置思路")]),e._v(" "),t("blockquote",[t("p",[e._v("lerna 默认使用 npm 来下载依赖包，在本工程中我希望使用 yarn ， 所以我在 lerna.json 中配置一下 "),t("code",[e._v("npmClient")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('...\n"npmClient": "yarn"\n...\n')])])]),t("blockquote",[t("p",[e._v("多个 package 可能有相同的依赖，我想把这些相同的依赖提取出来置于最顶层的 "),t("code",[e._v("node_modules")]),e._v(" ，好处自然是为了加快依赖包下载速度，好那就用lerna 提供的 "),t("code",[e._v("hoist")]),e._v("（提升）选项，来达到我目的吧")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('...\n "commands": {\n    "bootstrap": {\n      "hoist": "**"\n    }\n  },\n...\n')])])]),t("blockquote",[t("p",[e._v("lerna 配置完成")])]),e._v(" "),t("h2",{attrs:{id:"第三部分-eslint和prettier-使用代码规范检查及代码格式化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三部分-eslint和prettier-使用代码规范检查及代码格式化","aria-hidden":"true"}},[e._v("#")]),e._v(" 第三部分 eslint和prettier 使用代码规范检查及代码格式化")]),e._v(" "),t("p",[e._v("eslint 和 prettier 果真是一对好基友，eslint 有一些代码规则可以帮我们检测出代码中的一些逻辑或语法错误")]),e._v(" "),t("ul",[t("li",[e._v("禁用未声明的变量 (no-undef)")])]),e._v(" "),t("p",[t("img",{attrs:{src:"media/15177695140745/15179325920381.jpg",alt:"-w425"}})]),e._v(" "),t("h1",{attrs:{id:"脚手架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#脚手架","aria-hidden":"true"}},[e._v("#")]),e._v(" 脚手架")]),e._v(" "),t("ul",[t("li",[e._v("[x] babel环境配置")]),e._v(" "),t("li",[e._v("[x] 集成lerna")]),e._v(" "),t("li",[e._v("[x] 集成eslint 和 prettier")])])])},[],!1,null,null,null);r.options.__file="nodejs开发环境.md";a.default=r.exports}}]);